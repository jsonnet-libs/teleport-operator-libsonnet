{
  local d = (import 'doc-util/main.libsonnet'),
  '#':: d.pkg(name='teleportRole', url='', help='"Role is the Schema for the roles API"'),
  '#metadata':: d.obj(help='"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create."'),
  metadata: {
    '#withAnnotations':: d.fn(help='"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"', args=[d.arg(name='annotations', type=d.T.object)]),
    withAnnotations(annotations): { metadata+: { annotations: annotations } },
    '#withAnnotationsMixin':: d.fn(help='"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
    withAnnotationsMixin(annotations): { metadata+: { annotations+: annotations } },
    '#withClusterName':: d.fn(help='"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request."', args=[d.arg(name='clusterName', type=d.T.string)]),
    withClusterName(clusterName): { metadata+: { clusterName: clusterName } },
    '#withCreationTimestamp':: d.fn(help='"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers."', args=[d.arg(name='creationTimestamp', type=d.T.string)]),
    withCreationTimestamp(creationTimestamp): { metadata+: { creationTimestamp: creationTimestamp } },
    '#withDeletionGracePeriodSeconds':: d.fn(help='"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only."', args=[d.arg(name='deletionGracePeriodSeconds', type=d.T.integer)]),
    withDeletionGracePeriodSeconds(deletionGracePeriodSeconds): { metadata+: { deletionGracePeriodSeconds: deletionGracePeriodSeconds } },
    '#withDeletionTimestamp':: d.fn(help='"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers."', args=[d.arg(name='deletionTimestamp', type=d.T.string)]),
    withDeletionTimestamp(deletionTimestamp): { metadata+: { deletionTimestamp: deletionTimestamp } },
    '#withFinalizers':: d.fn(help='"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list."', args=[d.arg(name='finalizers', type=d.T.array)]),
    withFinalizers(finalizers): { metadata+: { finalizers: if std.isArray(v=finalizers) then finalizers else [finalizers] } },
    '#withFinalizersMixin':: d.fn(help='"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='finalizers', type=d.T.array)]),
    withFinalizersMixin(finalizers): { metadata+: { finalizers+: if std.isArray(v=finalizers) then finalizers else [finalizers] } },
    '#withGenerateName':: d.fn(help='"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency"', args=[d.arg(name='generateName', type=d.T.string)]),
    withGenerateName(generateName): { metadata+: { generateName: generateName } },
    '#withGeneration':: d.fn(help='"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only."', args=[d.arg(name='generation', type=d.T.integer)]),
    withGeneration(generation): { metadata+: { generation: generation } },
    '#withLabels':: d.fn(help='"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"', args=[d.arg(name='labels', type=d.T.object)]),
    withLabels(labels): { metadata+: { labels: labels } },
    '#withLabelsMixin':: d.fn(help='"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
    withLabelsMixin(labels): { metadata+: { labels+: labels } },
    '#withName':: d.fn(help='"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names"', args=[d.arg(name='name', type=d.T.string)]),
    withName(name): { metadata+: { name: name } },
    '#withNamespace':: d.fn(help='"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\"default\\" namespace, but \\"default\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces"', args=[d.arg(name='namespace', type=d.T.string)]),
    withNamespace(namespace): { metadata+: { namespace: namespace } },
    '#withOwnerReferences':: d.fn(help='"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller."', args=[d.arg(name='ownerReferences', type=d.T.array)]),
    withOwnerReferences(ownerReferences): { metadata+: { ownerReferences: if std.isArray(v=ownerReferences) then ownerReferences else [ownerReferences] } },
    '#withOwnerReferencesMixin':: d.fn(help='"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ownerReferences', type=d.T.array)]),
    withOwnerReferencesMixin(ownerReferences): { metadata+: { ownerReferences+: if std.isArray(v=ownerReferences) then ownerReferences else [ownerReferences] } },
    '#withResourceVersion':: d.fn(help='"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency"', args=[d.arg(name='resourceVersion', type=d.T.string)]),
    withResourceVersion(resourceVersion): { metadata+: { resourceVersion: resourceVersion } },
    '#withSelfLink':: d.fn(help='"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release."', args=[d.arg(name='selfLink', type=d.T.string)]),
    withSelfLink(selfLink): { metadata+: { selfLink: selfLink } },
    '#withUid':: d.fn(help='"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"', args=[d.arg(name='uid', type=d.T.string)]),
    withUid(uid): { metadata+: { uid: uid } },
  },
  '#new':: d.fn(help='new returns an instance of TeleportRole', args=[d.arg(name='name', type=d.T.string)]),
  new(name): {
    apiVersion: 'resources.teleport.dev/v6',
    kind: 'TeleportRole',
  } + self.metadata.withName(name=name),
  '#spec':: d.obj(help='"Role resource definition v6 from Teleport"'),
  spec: {
    '#allow':: d.obj(help='"Allow is the set of conditions evaluated to grant access."'),
    allow: {
      '#impersonate':: d.obj(help='"Impersonate specifies what users and roles this role is allowed to impersonate by issuing certificates or other possible means."'),
      impersonate: {
        '#withRoles':: d.fn(help='"Roles is a list of resources this role is allowed to impersonate"', args=[d.arg(name='roles', type=d.T.array)]),
        withRoles(roles): { spec+: { allow+: { impersonate+: { roles: if std.isArray(v=roles) then roles else [roles] } } } },
        '#withRolesMixin':: d.fn(help='"Roles is a list of resources this role is allowed to impersonate"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='roles', type=d.T.array)]),
        withRolesMixin(roles): { spec+: { allow+: { impersonate+: { roles+: if std.isArray(v=roles) then roles else [roles] } } } },
        '#withUsers':: d.fn(help='"Users is a list of resources this role is allowed to impersonate, could be an empty list or a Wildcard pattern"', args=[d.arg(name='users', type=d.T.array)]),
        withUsers(users): { spec+: { allow+: { impersonate+: { users: if std.isArray(v=users) then users else [users] } } } },
        '#withUsersMixin':: d.fn(help='"Users is a list of resources this role is allowed to impersonate, could be an empty list or a Wildcard pattern"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='users', type=d.T.array)]),
        withUsersMixin(users): { spec+: { allow+: { impersonate+: { users+: if std.isArray(v=users) then users else [users] } } } },
        '#withWhere':: d.fn(help='"Where specifies optional advanced matcher"', args=[d.arg(name='where', type=d.T.string)]),
        withWhere(where): { spec+: { allow+: { impersonate+: { where: where } } } },
      },
      '#join_sessions':: d.obj(help='"JoinSessions specifies policies to allow users to join other sessions."'),
      join_sessions: {
        '#withKinds':: d.fn(help='"Kinds are the session kinds this policy applies to."', args=[d.arg(name='kinds', type=d.T.array)]),
        withKinds(kinds): { kinds: if std.isArray(v=kinds) then kinds else [kinds] },
        '#withKindsMixin':: d.fn(help='"Kinds are the session kinds this policy applies to."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='kinds', type=d.T.array)]),
        withKindsMixin(kinds): { kinds+: if std.isArray(v=kinds) then kinds else [kinds] },
        '#withModes':: d.fn(help='"Modes is a list of permitted participant modes for this policy."', args=[d.arg(name='modes', type=d.T.array)]),
        withModes(modes): { modes: if std.isArray(v=modes) then modes else [modes] },
        '#withModesMixin':: d.fn(help='"Modes is a list of permitted participant modes for this policy."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='modes', type=d.T.array)]),
        withModesMixin(modes): { modes+: if std.isArray(v=modes) then modes else [modes] },
        '#withName':: d.fn(help='"Name is the name of the policy."', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { name: name },
        '#withRoles':: d.fn(help='"Roles is a list of roles that you can join the session of."', args=[d.arg(name='roles', type=d.T.array)]),
        withRoles(roles): { roles: if std.isArray(v=roles) then roles else [roles] },
        '#withRolesMixin':: d.fn(help='"Roles is a list of roles that you can join the session of."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='roles', type=d.T.array)]),
        withRolesMixin(roles): { roles+: if std.isArray(v=roles) then roles else [roles] },
      },
      '#kubernetes_resources':: d.obj(help='"KubernetesResources is the Kubernetes Resources this Role grants access to."'),
      kubernetes_resources: {
        '#withKind':: d.fn(help='"Kind specifies the Kubernetes Resource type. At the moment only \\"pod\\" is supported."', args=[d.arg(name='kind', type=d.T.string)]),
        withKind(kind): { kind: kind },
        '#withName':: d.fn(help='"Name is the resource name. It supports wildcards."', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { name: name },
        '#withNamespace':: d.fn(help='"Namespace is the resource namespace. It supports wildcards."', args=[d.arg(name='namespace', type=d.T.string)]),
        withNamespace(namespace): { namespace: namespace },
      },
      '#request':: d.obj(help=''),
      request: {
        '#claims_to_roles':: d.obj(help='"ClaimsToRoles specifies a mapping from claims (traits) to teleport roles."'),
        claims_to_roles: {
          '#withClaim':: d.fn(help='"Claim is a claim name."', args=[d.arg(name='claim', type=d.T.string)]),
          withClaim(claim): { claim: claim },
          '#withRoles':: d.fn(help='"Roles is a list of static teleport roles to match."', args=[d.arg(name='roles', type=d.T.array)]),
          withRoles(roles): { roles: if std.isArray(v=roles) then roles else [roles] },
          '#withRolesMixin':: d.fn(help='"Roles is a list of static teleport roles to match."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='roles', type=d.T.array)]),
          withRolesMixin(roles): { roles+: if std.isArray(v=roles) then roles else [roles] },
          '#withValue':: d.fn(help='"Value is a claim value to match."', args=[d.arg(name='value', type=d.T.string)]),
          withValue(value): { value: value },
        },
        '#thresholds':: d.obj(help='"Thresholds is a list of thresholds, one of which must be met in order for reviews to trigger a state-transition.  If no thresholds are provided, a default threshold of 1 for approval and denial is used."'),
        thresholds: {
          '#withApprove':: d.fn(help='"Approve is the number of matching approvals needed for state-transition."', args=[d.arg(name='approve', type=d.T.integer)]),
          withApprove(approve): { approve: approve },
          '#withDeny':: d.fn(help='"Deny is the number of denials needed for state-transition."', args=[d.arg(name='deny', type=d.T.integer)]),
          withDeny(deny): { deny: deny },
          '#withFilter':: d.fn(help='"Filter is an optional predicate used to determine which reviews count toward this threshold."', args=[d.arg(name='filter', type=d.T.string)]),
          withFilter(filter): { filter: filter },
          '#withName':: d.fn(help='"Name is the optional human-readable name of the threshold."', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { name: name },
        },
        '#withAnnotations':: d.fn(help='"Annotations is a collection of annotations to be programmatically appended to pending access requests at the time of their creation. These annotations serve as a mechanism to propagate extra information to plugins.  Since these annotations support variable interpolation syntax, they also offer a mechanism for forwarding claims from an external identity provider, to a plugin via {{ `{{external.trait_name}}` }} style substitutions."', args=[d.arg(name='annotations', type=d.T.object)]),
        withAnnotations(annotations): { spec+: { allow+: { request+: { annotations: annotations } } } },
        '#withAnnotationsMixin':: d.fn(help='"Annotations is a collection of annotations to be programmatically appended to pending access requests at the time of their creation. These annotations serve as a mechanism to propagate extra information to plugins.  Since these annotations support variable interpolation syntax, they also offer a mechanism for forwarding claims from an external identity provider, to a plugin via {{ `{{external.trait_name}}` }} style substitutions."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
        withAnnotationsMixin(annotations): { spec+: { allow+: { request+: { annotations+: annotations } } } },
        '#withClaims_to_roles':: d.fn(help='"ClaimsToRoles specifies a mapping from claims (traits) to teleport roles."', args=[d.arg(name='claims_to_roles', type=d.T.array)]),
        withClaims_to_roles(claims_to_roles): { spec+: { allow+: { request+: { claims_to_roles: if std.isArray(v=claims_to_roles) then claims_to_roles else [claims_to_roles] } } } },
        '#withClaims_to_rolesMixin':: d.fn(help='"ClaimsToRoles specifies a mapping from claims (traits) to teleport roles."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='claims_to_roles', type=d.T.array)]),
        withClaims_to_rolesMixin(claims_to_roles): { spec+: { allow+: { request+: { claims_to_roles+: if std.isArray(v=claims_to_roles) then claims_to_roles else [claims_to_roles] } } } },
        '#withRoles':: d.fn(help='"Roles is the name of roles which will match the request rule."', args=[d.arg(name='roles', type=d.T.array)]),
        withRoles(roles): { spec+: { allow+: { request+: { roles: if std.isArray(v=roles) then roles else [roles] } } } },
        '#withRolesMixin':: d.fn(help='"Roles is the name of roles which will match the request rule."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='roles', type=d.T.array)]),
        withRolesMixin(roles): { spec+: { allow+: { request+: { roles+: if std.isArray(v=roles) then roles else [roles] } } } },
        '#withSearch_as_roles':: d.fn(help='"SearchAsRoles is a list of extra roles which should apply to a user while they are searching for resources as part of a Resource Access Request, and defines the underlying roles which will be requested as part of any Resource Access Request."', args=[d.arg(name='search_as_roles', type=d.T.array)]),
        withSearch_as_roles(search_as_roles): { spec+: { allow+: { request+: { search_as_roles: if std.isArray(v=search_as_roles) then search_as_roles else [search_as_roles] } } } },
        '#withSearch_as_rolesMixin':: d.fn(help='"SearchAsRoles is a list of extra roles which should apply to a user while they are searching for resources as part of a Resource Access Request, and defines the underlying roles which will be requested as part of any Resource Access Request."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='search_as_roles', type=d.T.array)]),
        withSearch_as_rolesMixin(search_as_roles): { spec+: { allow+: { request+: { search_as_roles+: if std.isArray(v=search_as_roles) then search_as_roles else [search_as_roles] } } } },
        '#withSuggested_reviewers':: d.fn(help='"SuggestedReviewers is a list of reviewer suggestions.  These can be teleport usernames, but that is not a requirement."', args=[d.arg(name='suggested_reviewers', type=d.T.array)]),
        withSuggested_reviewers(suggested_reviewers): { spec+: { allow+: { request+: { suggested_reviewers: if std.isArray(v=suggested_reviewers) then suggested_reviewers else [suggested_reviewers] } } } },
        '#withSuggested_reviewersMixin':: d.fn(help='"SuggestedReviewers is a list of reviewer suggestions.  These can be teleport usernames, but that is not a requirement."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='suggested_reviewers', type=d.T.array)]),
        withSuggested_reviewersMixin(suggested_reviewers): { spec+: { allow+: { request+: { suggested_reviewers+: if std.isArray(v=suggested_reviewers) then suggested_reviewers else [suggested_reviewers] } } } },
        '#withThresholds':: d.fn(help='"Thresholds is a list of thresholds, one of which must be met in order for reviews to trigger a state-transition.  If no thresholds are provided, a default threshold of 1 for approval and denial is used."', args=[d.arg(name='thresholds', type=d.T.array)]),
        withThresholds(thresholds): { spec+: { allow+: { request+: { thresholds: if std.isArray(v=thresholds) then thresholds else [thresholds] } } } },
        '#withThresholdsMixin':: d.fn(help='"Thresholds is a list of thresholds, one of which must be met in order for reviews to trigger a state-transition.  If no thresholds are provided, a default threshold of 1 for approval and denial is used."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='thresholds', type=d.T.array)]),
        withThresholdsMixin(thresholds): { spec+: { allow+: { request+: { thresholds+: if std.isArray(v=thresholds) then thresholds else [thresholds] } } } },
      },
      '#require_session_join':: d.obj(help='"RequireSessionJoin specifies policies for required users to start a session."'),
      require_session_join: {
        '#withCount':: d.fn(help='"Count is the amount of people that need to be matched for this policy to be fulfilled."', args=[d.arg(name='count', type=d.T.integer)]),
        withCount(count): { count: count },
        '#withFilter':: d.fn(help='"Filter is a predicate that determines what users count towards this policy."', args=[d.arg(name='filter', type=d.T.string)]),
        withFilter(filter): { filter: filter },
        '#withKinds':: d.fn(help='"Kinds are the session kinds this policy applies to."', args=[d.arg(name='kinds', type=d.T.array)]),
        withKinds(kinds): { kinds: if std.isArray(v=kinds) then kinds else [kinds] },
        '#withKindsMixin':: d.fn(help='"Kinds are the session kinds this policy applies to."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='kinds', type=d.T.array)]),
        withKindsMixin(kinds): { kinds+: if std.isArray(v=kinds) then kinds else [kinds] },
        '#withModes':: d.fn(help='"Modes is the list of modes that may be used to fulfill this policy."', args=[d.arg(name='modes', type=d.T.array)]),
        withModes(modes): { modes: if std.isArray(v=modes) then modes else [modes] },
        '#withModesMixin':: d.fn(help='"Modes is the list of modes that may be used to fulfill this policy."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='modes', type=d.T.array)]),
        withModesMixin(modes): { modes+: if std.isArray(v=modes) then modes else [modes] },
        '#withName':: d.fn(help='"Name is the name of the policy."', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { name: name },
        '#withOn_leave':: d.fn(help="\"OnLeave is the behaviour that's used when the policy is no longer fulfilled for a live session.\"", args=[d.arg(name='on_leave', type=d.T.string)]),
        withOn_leave(on_leave): { on_leave: on_leave },
      },
      '#review_requests':: d.obj(help='"ReviewRequests defines conditions for submitting access reviews."'),
      review_requests: {
        '#claims_to_roles':: d.obj(help='"ClaimsToRoles specifies a mapping from claims (traits) to teleport roles."'),
        claims_to_roles: {
          '#withClaim':: d.fn(help='"Claim is a claim name."', args=[d.arg(name='claim', type=d.T.string)]),
          withClaim(claim): { claim: claim },
          '#withRoles':: d.fn(help='"Roles is a list of static teleport roles to match."', args=[d.arg(name='roles', type=d.T.array)]),
          withRoles(roles): { roles: if std.isArray(v=roles) then roles else [roles] },
          '#withRolesMixin':: d.fn(help='"Roles is a list of static teleport roles to match."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='roles', type=d.T.array)]),
          withRolesMixin(roles): { roles+: if std.isArray(v=roles) then roles else [roles] },
          '#withValue':: d.fn(help='"Value is a claim value to match."', args=[d.arg(name='value', type=d.T.string)]),
          withValue(value): { value: value },
        },
        '#withClaims_to_roles':: d.fn(help='"ClaimsToRoles specifies a mapping from claims (traits) to teleport roles."', args=[d.arg(name='claims_to_roles', type=d.T.array)]),
        withClaims_to_roles(claims_to_roles): { spec+: { allow+: { review_requests+: { claims_to_roles: if std.isArray(v=claims_to_roles) then claims_to_roles else [claims_to_roles] } } } },
        '#withClaims_to_rolesMixin':: d.fn(help='"ClaimsToRoles specifies a mapping from claims (traits) to teleport roles."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='claims_to_roles', type=d.T.array)]),
        withClaims_to_rolesMixin(claims_to_roles): { spec+: { allow+: { review_requests+: { claims_to_roles+: if std.isArray(v=claims_to_roles) then claims_to_roles else [claims_to_roles] } } } },
        '#withPreview_as_roles':: d.fn(help='"PreviewAsRoles is a list of extra roles which should apply to a reviewer while they are viewing a Resource Access Request for the purposes of viewing details such as the hostname and labels of requested resources."', args=[d.arg(name='preview_as_roles', type=d.T.array)]),
        withPreview_as_roles(preview_as_roles): { spec+: { allow+: { review_requests+: { preview_as_roles: if std.isArray(v=preview_as_roles) then preview_as_roles else [preview_as_roles] } } } },
        '#withPreview_as_rolesMixin':: d.fn(help='"PreviewAsRoles is a list of extra roles which should apply to a reviewer while they are viewing a Resource Access Request for the purposes of viewing details such as the hostname and labels of requested resources."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='preview_as_roles', type=d.T.array)]),
        withPreview_as_rolesMixin(preview_as_roles): { spec+: { allow+: { review_requests+: { preview_as_roles+: if std.isArray(v=preview_as_roles) then preview_as_roles else [preview_as_roles] } } } },
        '#withRoles':: d.fn(help='"Roles is the name of roles which may be reviewed."', args=[d.arg(name='roles', type=d.T.array)]),
        withRoles(roles): { spec+: { allow+: { review_requests+: { roles: if std.isArray(v=roles) then roles else [roles] } } } },
        '#withRolesMixin':: d.fn(help='"Roles is the name of roles which may be reviewed."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='roles', type=d.T.array)]),
        withRolesMixin(roles): { spec+: { allow+: { review_requests+: { roles+: if std.isArray(v=roles) then roles else [roles] } } } },
        '#withWhere':: d.fn(help='"Where is an optional predicate which further limits which requests are reviewable."', args=[d.arg(name='where', type=d.T.string)]),
        withWhere(where): { spec+: { allow+: { review_requests+: { where: where } } } },
      },
      '#rules':: d.obj(help='"Rules is a list of rules and their access levels. Rules are a high level construct used for access control."'),
      rules: {
        '#withActions':: d.fn(help='"Actions specifies optional actions taken when this rule matches"', args=[d.arg(name='actions', type=d.T.array)]),
        withActions(actions): { actions: if std.isArray(v=actions) then actions else [actions] },
        '#withActionsMixin':: d.fn(help='"Actions specifies optional actions taken when this rule matches"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='actions', type=d.T.array)]),
        withActionsMixin(actions): { actions+: if std.isArray(v=actions) then actions else [actions] },
        '#withResources':: d.fn(help='"Resources is a list of resources"', args=[d.arg(name='resources', type=d.T.array)]),
        withResources(resources): { resources: if std.isArray(v=resources) then resources else [resources] },
        '#withResourcesMixin':: d.fn(help='"Resources is a list of resources"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='resources', type=d.T.array)]),
        withResourcesMixin(resources): { resources+: if std.isArray(v=resources) then resources else [resources] },
        '#withVerbs':: d.fn(help='"Verbs is a list of verbs"', args=[d.arg(name='verbs', type=d.T.array)]),
        withVerbs(verbs): { verbs: if std.isArray(v=verbs) then verbs else [verbs] },
        '#withVerbsMixin':: d.fn(help='"Verbs is a list of verbs"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='verbs', type=d.T.array)]),
        withVerbsMixin(verbs): { verbs+: if std.isArray(v=verbs) then verbs else [verbs] },
        '#withWhere':: d.fn(help='"Where specifies optional advanced matcher"', args=[d.arg(name='where', type=d.T.string)]),
        withWhere(where): { where: where },
      },
      '#withApp_labels':: d.fn(help='"AppLabels is a map of labels used as part of the RBAC system."', args=[d.arg(name='app_labels', type=d.T.object)]),
      withApp_labels(app_labels): { spec+: { allow+: { app_labels: app_labels } } },
      '#withApp_labelsMixin':: d.fn(help='"AppLabels is a map of labels used as part of the RBAC system."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='app_labels', type=d.T.object)]),
      withApp_labelsMixin(app_labels): { spec+: { allow+: { app_labels+: app_labels } } },
      '#withAws_role_arns':: d.fn(help='"AWSRoleARNs is a list of AWS role ARNs this role is allowed to assume."', args=[d.arg(name='aws_role_arns', type=d.T.array)]),
      withAws_role_arns(aws_role_arns): { spec+: { allow+: { aws_role_arns: if std.isArray(v=aws_role_arns) then aws_role_arns else [aws_role_arns] } } },
      '#withAws_role_arnsMixin':: d.fn(help='"AWSRoleARNs is a list of AWS role ARNs this role is allowed to assume."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='aws_role_arns', type=d.T.array)]),
      withAws_role_arnsMixin(aws_role_arns): { spec+: { allow+: { aws_role_arns+: if std.isArray(v=aws_role_arns) then aws_role_arns else [aws_role_arns] } } },
      '#withAzure_identities':: d.fn(help='"AzureIdentities is a list of Azure identities this role is allowed to assume."', args=[d.arg(name='azure_identities', type=d.T.array)]),
      withAzure_identities(azure_identities): { spec+: { allow+: { azure_identities: if std.isArray(v=azure_identities) then azure_identities else [azure_identities] } } },
      '#withAzure_identitiesMixin':: d.fn(help='"AzureIdentities is a list of Azure identities this role is allowed to assume."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='azure_identities', type=d.T.array)]),
      withAzure_identitiesMixin(azure_identities): { spec+: { allow+: { azure_identities+: if std.isArray(v=azure_identities) then azure_identities else [azure_identities] } } },
      '#withCluster_labels':: d.fn(help='"ClusterLabels is a map of node labels (used to dynamically grant access to clusters)."', args=[d.arg(name='cluster_labels', type=d.T.object)]),
      withCluster_labels(cluster_labels): { spec+: { allow+: { cluster_labels: cluster_labels } } },
      '#withCluster_labelsMixin':: d.fn(help='"ClusterLabels is a map of node labels (used to dynamically grant access to clusters)."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='cluster_labels', type=d.T.object)]),
      withCluster_labelsMixin(cluster_labels): { spec+: { allow+: { cluster_labels+: cluster_labels } } },
      '#withDb_labels':: d.fn(help='"DatabaseLabels are used in RBAC system to allow/deny access to databases."', args=[d.arg(name='db_labels', type=d.T.object)]),
      withDb_labels(db_labels): { spec+: { allow+: { db_labels: db_labels } } },
      '#withDb_labelsMixin':: d.fn(help='"DatabaseLabels are used in RBAC system to allow/deny access to databases."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='db_labels', type=d.T.object)]),
      withDb_labelsMixin(db_labels): { spec+: { allow+: { db_labels+: db_labels } } },
      '#withDb_names':: d.fn(help='"DatabaseNames is a list of database names this role is allowed to connect to."', args=[d.arg(name='db_names', type=d.T.array)]),
      withDb_names(db_names): { spec+: { allow+: { db_names: if std.isArray(v=db_names) then db_names else [db_names] } } },
      '#withDb_namesMixin':: d.fn(help='"DatabaseNames is a list of database names this role is allowed to connect to."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='db_names', type=d.T.array)]),
      withDb_namesMixin(db_names): { spec+: { allow+: { db_names+: if std.isArray(v=db_names) then db_names else [db_names] } } },
      '#withDb_roles':: d.fn(help='"DatabaseRoles is a list of databases roles for automatic user creation."', args=[d.arg(name='db_roles', type=d.T.array)]),
      withDb_roles(db_roles): { spec+: { allow+: { db_roles: if std.isArray(v=db_roles) then db_roles else [db_roles] } } },
      '#withDb_rolesMixin':: d.fn(help='"DatabaseRoles is a list of databases roles for automatic user creation."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='db_roles', type=d.T.array)]),
      withDb_rolesMixin(db_roles): { spec+: { allow+: { db_roles+: if std.isArray(v=db_roles) then db_roles else [db_roles] } } },
      '#withDb_service_labels':: d.fn(help='"DatabaseServiceLabels are used in RBAC system to allow/deny access to Database Services."', args=[d.arg(name='db_service_labels', type=d.T.object)]),
      withDb_service_labels(db_service_labels): { spec+: { allow+: { db_service_labels: db_service_labels } } },
      '#withDb_service_labelsMixin':: d.fn(help='"DatabaseServiceLabels are used in RBAC system to allow/deny access to Database Services."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='db_service_labels', type=d.T.object)]),
      withDb_service_labelsMixin(db_service_labels): { spec+: { allow+: { db_service_labels+: db_service_labels } } },
      '#withDb_users':: d.fn(help='"DatabaseUsers is a list of databases users this role is allowed to connect as."', args=[d.arg(name='db_users', type=d.T.array)]),
      withDb_users(db_users): { spec+: { allow+: { db_users: if std.isArray(v=db_users) then db_users else [db_users] } } },
      '#withDb_usersMixin':: d.fn(help='"DatabaseUsers is a list of databases users this role is allowed to connect as."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='db_users', type=d.T.array)]),
      withDb_usersMixin(db_users): { spec+: { allow+: { db_users+: if std.isArray(v=db_users) then db_users else [db_users] } } },
      '#withDesktop_groups':: d.fn(help='"DesktopGroups is a list of groups for created desktop users to be added to"', args=[d.arg(name='desktop_groups', type=d.T.array)]),
      withDesktop_groups(desktop_groups): { spec+: { allow+: { desktop_groups: if std.isArray(v=desktop_groups) then desktop_groups else [desktop_groups] } } },
      '#withDesktop_groupsMixin':: d.fn(help='"DesktopGroups is a list of groups for created desktop users to be added to"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='desktop_groups', type=d.T.array)]),
      withDesktop_groupsMixin(desktop_groups): { spec+: { allow+: { desktop_groups+: if std.isArray(v=desktop_groups) then desktop_groups else [desktop_groups] } } },
      '#withGcp_service_accounts':: d.fn(help='"GCPServiceAccounts is a list of GCP service accounts this role is allowed to assume."', args=[d.arg(name='gcp_service_accounts', type=d.T.array)]),
      withGcp_service_accounts(gcp_service_accounts): { spec+: { allow+: { gcp_service_accounts: if std.isArray(v=gcp_service_accounts) then gcp_service_accounts else [gcp_service_accounts] } } },
      '#withGcp_service_accountsMixin':: d.fn(help='"GCPServiceAccounts is a list of GCP service accounts this role is allowed to assume."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='gcp_service_accounts', type=d.T.array)]),
      withGcp_service_accountsMixin(gcp_service_accounts): { spec+: { allow+: { gcp_service_accounts+: if std.isArray(v=gcp_service_accounts) then gcp_service_accounts else [gcp_service_accounts] } } },
      '#withGroup_labels':: d.fn(help='"GroupLabels is a map of labels used as part of the RBAC system."', args=[d.arg(name='group_labels', type=d.T.object)]),
      withGroup_labels(group_labels): { spec+: { allow+: { group_labels: group_labels } } },
      '#withGroup_labelsMixin':: d.fn(help='"GroupLabels is a map of labels used as part of the RBAC system."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='group_labels', type=d.T.object)]),
      withGroup_labelsMixin(group_labels): { spec+: { allow+: { group_labels+: group_labels } } },
      '#withHost_groups':: d.fn(help='"HostGroups is a list of groups for created users to be added to"', args=[d.arg(name='host_groups', type=d.T.array)]),
      withHost_groups(host_groups): { spec+: { allow+: { host_groups: if std.isArray(v=host_groups) then host_groups else [host_groups] } } },
      '#withHost_groupsMixin':: d.fn(help='"HostGroups is a list of groups for created users to be added to"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='host_groups', type=d.T.array)]),
      withHost_groupsMixin(host_groups): { spec+: { allow+: { host_groups+: if std.isArray(v=host_groups) then host_groups else [host_groups] } } },
      '#withHost_sudoers':: d.fn(help='"HostSudoers is a list of entries to include in a users sudoer file"', args=[d.arg(name='host_sudoers', type=d.T.array)]),
      withHost_sudoers(host_sudoers): { spec+: { allow+: { host_sudoers: if std.isArray(v=host_sudoers) then host_sudoers else [host_sudoers] } } },
      '#withHost_sudoersMixin':: d.fn(help='"HostSudoers is a list of entries to include in a users sudoer file"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='host_sudoers', type=d.T.array)]),
      withHost_sudoersMixin(host_sudoers): { spec+: { allow+: { host_sudoers+: if std.isArray(v=host_sudoers) then host_sudoers else [host_sudoers] } } },
      '#withJoin_sessions':: d.fn(help='"JoinSessions specifies policies to allow users to join other sessions."', args=[d.arg(name='join_sessions', type=d.T.array)]),
      withJoin_sessions(join_sessions): { spec+: { allow+: { join_sessions: if std.isArray(v=join_sessions) then join_sessions else [join_sessions] } } },
      '#withJoin_sessionsMixin':: d.fn(help='"JoinSessions specifies policies to allow users to join other sessions."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='join_sessions', type=d.T.array)]),
      withJoin_sessionsMixin(join_sessions): { spec+: { allow+: { join_sessions+: if std.isArray(v=join_sessions) then join_sessions else [join_sessions] } } },
      '#withKubernetes_groups':: d.fn(help='"KubeGroups is a list of kubernetes groups"', args=[d.arg(name='kubernetes_groups', type=d.T.array)]),
      withKubernetes_groups(kubernetes_groups): { spec+: { allow+: { kubernetes_groups: if std.isArray(v=kubernetes_groups) then kubernetes_groups else [kubernetes_groups] } } },
      '#withKubernetes_groupsMixin':: d.fn(help='"KubeGroups is a list of kubernetes groups"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='kubernetes_groups', type=d.T.array)]),
      withKubernetes_groupsMixin(kubernetes_groups): { spec+: { allow+: { kubernetes_groups+: if std.isArray(v=kubernetes_groups) then kubernetes_groups else [kubernetes_groups] } } },
      '#withKubernetes_labels':: d.fn(help='"KubernetesLabels is a map of kubernetes cluster labels used for RBAC."', args=[d.arg(name='kubernetes_labels', type=d.T.object)]),
      withKubernetes_labels(kubernetes_labels): { spec+: { allow+: { kubernetes_labels: kubernetes_labels } } },
      '#withKubernetes_labelsMixin':: d.fn(help='"KubernetesLabels is a map of kubernetes cluster labels used for RBAC."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='kubernetes_labels', type=d.T.object)]),
      withKubernetes_labelsMixin(kubernetes_labels): { spec+: { allow+: { kubernetes_labels+: kubernetes_labels } } },
      '#withKubernetes_resources':: d.fn(help='"KubernetesResources is the Kubernetes Resources this Role grants access to."', args=[d.arg(name='kubernetes_resources', type=d.T.array)]),
      withKubernetes_resources(kubernetes_resources): { spec+: { allow+: { kubernetes_resources: if std.isArray(v=kubernetes_resources) then kubernetes_resources else [kubernetes_resources] } } },
      '#withKubernetes_resourcesMixin':: d.fn(help='"KubernetesResources is the Kubernetes Resources this Role grants access to."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='kubernetes_resources', type=d.T.array)]),
      withKubernetes_resourcesMixin(kubernetes_resources): { spec+: { allow+: { kubernetes_resources+: if std.isArray(v=kubernetes_resources) then kubernetes_resources else [kubernetes_resources] } } },
      '#withKubernetes_users':: d.fn(help='"KubeUsers is an optional kubernetes users to impersonate"', args=[d.arg(name='kubernetes_users', type=d.T.array)]),
      withKubernetes_users(kubernetes_users): { spec+: { allow+: { kubernetes_users: if std.isArray(v=kubernetes_users) then kubernetes_users else [kubernetes_users] } } },
      '#withKubernetes_usersMixin':: d.fn(help='"KubeUsers is an optional kubernetes users to impersonate"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='kubernetes_users', type=d.T.array)]),
      withKubernetes_usersMixin(kubernetes_users): { spec+: { allow+: { kubernetes_users+: if std.isArray(v=kubernetes_users) then kubernetes_users else [kubernetes_users] } } },
      '#withLogins':: d.fn(help='"Logins is a list of *nix system logins."', args=[d.arg(name='logins', type=d.T.array)]),
      withLogins(logins): { spec+: { allow+: { logins: if std.isArray(v=logins) then logins else [logins] } } },
      '#withLoginsMixin':: d.fn(help='"Logins is a list of *nix system logins."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='logins', type=d.T.array)]),
      withLoginsMixin(logins): { spec+: { allow+: { logins+: if std.isArray(v=logins) then logins else [logins] } } },
      '#withNode_labels':: d.fn(help='"NodeLabels is a map of node labels (used to dynamically grant access to nodes)."', args=[d.arg(name='node_labels', type=d.T.object)]),
      withNode_labels(node_labels): { spec+: { allow+: { node_labels: node_labels } } },
      '#withNode_labelsMixin':: d.fn(help='"NodeLabels is a map of node labels (used to dynamically grant access to nodes)."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='node_labels', type=d.T.object)]),
      withNode_labelsMixin(node_labels): { spec+: { allow+: { node_labels+: node_labels } } },
      '#withRequire_session_join':: d.fn(help='"RequireSessionJoin specifies policies for required users to start a session."', args=[d.arg(name='require_session_join', type=d.T.array)]),
      withRequire_session_join(require_session_join): { spec+: { allow+: { require_session_join: if std.isArray(v=require_session_join) then require_session_join else [require_session_join] } } },
      '#withRequire_session_joinMixin':: d.fn(help='"RequireSessionJoin specifies policies for required users to start a session."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='require_session_join', type=d.T.array)]),
      withRequire_session_joinMixin(require_session_join): { spec+: { allow+: { require_session_join+: if std.isArray(v=require_session_join) then require_session_join else [require_session_join] } } },
      '#withRules':: d.fn(help='"Rules is a list of rules and their access levels. Rules are a high level construct used for access control."', args=[d.arg(name='rules', type=d.T.array)]),
      withRules(rules): { spec+: { allow+: { rules: if std.isArray(v=rules) then rules else [rules] } } },
      '#withRulesMixin':: d.fn(help='"Rules is a list of rules and their access levels. Rules are a high level construct used for access control."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='rules', type=d.T.array)]),
      withRulesMixin(rules): { spec+: { allow+: { rules+: if std.isArray(v=rules) then rules else [rules] } } },
      '#withWindows_desktop_labels':: d.fn(help='"WindowsDesktopLabels are used in the RBAC system to allow/deny access to Windows desktops."', args=[d.arg(name='windows_desktop_labels', type=d.T.object)]),
      withWindows_desktop_labels(windows_desktop_labels): { spec+: { allow+: { windows_desktop_labels: windows_desktop_labels } } },
      '#withWindows_desktop_labelsMixin':: d.fn(help='"WindowsDesktopLabels are used in the RBAC system to allow/deny access to Windows desktops."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='windows_desktop_labels', type=d.T.object)]),
      withWindows_desktop_labelsMixin(windows_desktop_labels): { spec+: { allow+: { windows_desktop_labels+: windows_desktop_labels } } },
      '#withWindows_desktop_logins':: d.fn(help='"WindowsDesktopLogins is a list of desktop login names allowed/denied for Windows desktops."', args=[d.arg(name='windows_desktop_logins', type=d.T.array)]),
      withWindows_desktop_logins(windows_desktop_logins): { spec+: { allow+: { windows_desktop_logins: if std.isArray(v=windows_desktop_logins) then windows_desktop_logins else [windows_desktop_logins] } } },
      '#withWindows_desktop_loginsMixin':: d.fn(help='"WindowsDesktopLogins is a list of desktop login names allowed/denied for Windows desktops."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='windows_desktop_logins', type=d.T.array)]),
      withWindows_desktop_loginsMixin(windows_desktop_logins): { spec+: { allow+: { windows_desktop_logins+: if std.isArray(v=windows_desktop_logins) then windows_desktop_logins else [windows_desktop_logins] } } },
    },
    '#deny':: d.obj(help='"Deny is the set of conditions evaluated to deny access. Deny takes priority over allow."'),
    deny: {
      '#impersonate':: d.obj(help='"Impersonate specifies what users and roles this role is allowed to impersonate by issuing certificates or other possible means."'),
      impersonate: {
        '#withRoles':: d.fn(help='"Roles is a list of resources this role is allowed to impersonate"', args=[d.arg(name='roles', type=d.T.array)]),
        withRoles(roles): { spec+: { deny+: { impersonate+: { roles: if std.isArray(v=roles) then roles else [roles] } } } },
        '#withRolesMixin':: d.fn(help='"Roles is a list of resources this role is allowed to impersonate"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='roles', type=d.T.array)]),
        withRolesMixin(roles): { spec+: { deny+: { impersonate+: { roles+: if std.isArray(v=roles) then roles else [roles] } } } },
        '#withUsers':: d.fn(help='"Users is a list of resources this role is allowed to impersonate, could be an empty list or a Wildcard pattern"', args=[d.arg(name='users', type=d.T.array)]),
        withUsers(users): { spec+: { deny+: { impersonate+: { users: if std.isArray(v=users) then users else [users] } } } },
        '#withUsersMixin':: d.fn(help='"Users is a list of resources this role is allowed to impersonate, could be an empty list or a Wildcard pattern"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='users', type=d.T.array)]),
        withUsersMixin(users): { spec+: { deny+: { impersonate+: { users+: if std.isArray(v=users) then users else [users] } } } },
        '#withWhere':: d.fn(help='"Where specifies optional advanced matcher"', args=[d.arg(name='where', type=d.T.string)]),
        withWhere(where): { spec+: { deny+: { impersonate+: { where: where } } } },
      },
      '#join_sessions':: d.obj(help='"JoinSessions specifies policies to allow users to join other sessions."'),
      join_sessions: {
        '#withKinds':: d.fn(help='"Kinds are the session kinds this policy applies to."', args=[d.arg(name='kinds', type=d.T.array)]),
        withKinds(kinds): { kinds: if std.isArray(v=kinds) then kinds else [kinds] },
        '#withKindsMixin':: d.fn(help='"Kinds are the session kinds this policy applies to."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='kinds', type=d.T.array)]),
        withKindsMixin(kinds): { kinds+: if std.isArray(v=kinds) then kinds else [kinds] },
        '#withModes':: d.fn(help='"Modes is a list of permitted participant modes for this policy."', args=[d.arg(name='modes', type=d.T.array)]),
        withModes(modes): { modes: if std.isArray(v=modes) then modes else [modes] },
        '#withModesMixin':: d.fn(help='"Modes is a list of permitted participant modes for this policy."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='modes', type=d.T.array)]),
        withModesMixin(modes): { modes+: if std.isArray(v=modes) then modes else [modes] },
        '#withName':: d.fn(help='"Name is the name of the policy."', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { name: name },
        '#withRoles':: d.fn(help='"Roles is a list of roles that you can join the session of."', args=[d.arg(name='roles', type=d.T.array)]),
        withRoles(roles): { roles: if std.isArray(v=roles) then roles else [roles] },
        '#withRolesMixin':: d.fn(help='"Roles is a list of roles that you can join the session of."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='roles', type=d.T.array)]),
        withRolesMixin(roles): { roles+: if std.isArray(v=roles) then roles else [roles] },
      },
      '#kubernetes_resources':: d.obj(help='"KubernetesResources is the Kubernetes Resources this Role grants access to."'),
      kubernetes_resources: {
        '#withKind':: d.fn(help='"Kind specifies the Kubernetes Resource type. At the moment only \\"pod\\" is supported."', args=[d.arg(name='kind', type=d.T.string)]),
        withKind(kind): { kind: kind },
        '#withName':: d.fn(help='"Name is the resource name. It supports wildcards."', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { name: name },
        '#withNamespace':: d.fn(help='"Namespace is the resource namespace. It supports wildcards."', args=[d.arg(name='namespace', type=d.T.string)]),
        withNamespace(namespace): { namespace: namespace },
      },
      '#request':: d.obj(help=''),
      request: {
        '#claims_to_roles':: d.obj(help='"ClaimsToRoles specifies a mapping from claims (traits) to teleport roles."'),
        claims_to_roles: {
          '#withClaim':: d.fn(help='"Claim is a claim name."', args=[d.arg(name='claim', type=d.T.string)]),
          withClaim(claim): { claim: claim },
          '#withRoles':: d.fn(help='"Roles is a list of static teleport roles to match."', args=[d.arg(name='roles', type=d.T.array)]),
          withRoles(roles): { roles: if std.isArray(v=roles) then roles else [roles] },
          '#withRolesMixin':: d.fn(help='"Roles is a list of static teleport roles to match."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='roles', type=d.T.array)]),
          withRolesMixin(roles): { roles+: if std.isArray(v=roles) then roles else [roles] },
          '#withValue':: d.fn(help='"Value is a claim value to match."', args=[d.arg(name='value', type=d.T.string)]),
          withValue(value): { value: value },
        },
        '#thresholds':: d.obj(help='"Thresholds is a list of thresholds, one of which must be met in order for reviews to trigger a state-transition.  If no thresholds are provided, a default threshold of 1 for approval and denial is used."'),
        thresholds: {
          '#withApprove':: d.fn(help='"Approve is the number of matching approvals needed for state-transition."', args=[d.arg(name='approve', type=d.T.integer)]),
          withApprove(approve): { approve: approve },
          '#withDeny':: d.fn(help='"Deny is the number of denials needed for state-transition."', args=[d.arg(name='deny', type=d.T.integer)]),
          withDeny(deny): { deny: deny },
          '#withFilter':: d.fn(help='"Filter is an optional predicate used to determine which reviews count toward this threshold."', args=[d.arg(name='filter', type=d.T.string)]),
          withFilter(filter): { filter: filter },
          '#withName':: d.fn(help='"Name is the optional human-readable name of the threshold."', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { name: name },
        },
        '#withAnnotations':: d.fn(help='"Annotations is a collection of annotations to be programmatically appended to pending access requests at the time of their creation. These annotations serve as a mechanism to propagate extra information to plugins.  Since these annotations support variable interpolation syntax, they also offer a mechanism for forwarding claims from an external identity provider, to a plugin via {{ `{{external.trait_name}}` }} style substitutions."', args=[d.arg(name='annotations', type=d.T.object)]),
        withAnnotations(annotations): { spec+: { deny+: { request+: { annotations: annotations } } } },
        '#withAnnotationsMixin':: d.fn(help='"Annotations is a collection of annotations to be programmatically appended to pending access requests at the time of their creation. These annotations serve as a mechanism to propagate extra information to plugins.  Since these annotations support variable interpolation syntax, they also offer a mechanism for forwarding claims from an external identity provider, to a plugin via {{ `{{external.trait_name}}` }} style substitutions."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
        withAnnotationsMixin(annotations): { spec+: { deny+: { request+: { annotations+: annotations } } } },
        '#withClaims_to_roles':: d.fn(help='"ClaimsToRoles specifies a mapping from claims (traits) to teleport roles."', args=[d.arg(name='claims_to_roles', type=d.T.array)]),
        withClaims_to_roles(claims_to_roles): { spec+: { deny+: { request+: { claims_to_roles: if std.isArray(v=claims_to_roles) then claims_to_roles else [claims_to_roles] } } } },
        '#withClaims_to_rolesMixin':: d.fn(help='"ClaimsToRoles specifies a mapping from claims (traits) to teleport roles."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='claims_to_roles', type=d.T.array)]),
        withClaims_to_rolesMixin(claims_to_roles): { spec+: { deny+: { request+: { claims_to_roles+: if std.isArray(v=claims_to_roles) then claims_to_roles else [claims_to_roles] } } } },
        '#withRoles':: d.fn(help='"Roles is the name of roles which will match the request rule."', args=[d.arg(name='roles', type=d.T.array)]),
        withRoles(roles): { spec+: { deny+: { request+: { roles: if std.isArray(v=roles) then roles else [roles] } } } },
        '#withRolesMixin':: d.fn(help='"Roles is the name of roles which will match the request rule."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='roles', type=d.T.array)]),
        withRolesMixin(roles): { spec+: { deny+: { request+: { roles+: if std.isArray(v=roles) then roles else [roles] } } } },
        '#withSearch_as_roles':: d.fn(help='"SearchAsRoles is a list of extra roles which should apply to a user while they are searching for resources as part of a Resource Access Request, and defines the underlying roles which will be requested as part of any Resource Access Request."', args=[d.arg(name='search_as_roles', type=d.T.array)]),
        withSearch_as_roles(search_as_roles): { spec+: { deny+: { request+: { search_as_roles: if std.isArray(v=search_as_roles) then search_as_roles else [search_as_roles] } } } },
        '#withSearch_as_rolesMixin':: d.fn(help='"SearchAsRoles is a list of extra roles which should apply to a user while they are searching for resources as part of a Resource Access Request, and defines the underlying roles which will be requested as part of any Resource Access Request."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='search_as_roles', type=d.T.array)]),
        withSearch_as_rolesMixin(search_as_roles): { spec+: { deny+: { request+: { search_as_roles+: if std.isArray(v=search_as_roles) then search_as_roles else [search_as_roles] } } } },
        '#withSuggested_reviewers':: d.fn(help='"SuggestedReviewers is a list of reviewer suggestions.  These can be teleport usernames, but that is not a requirement."', args=[d.arg(name='suggested_reviewers', type=d.T.array)]),
        withSuggested_reviewers(suggested_reviewers): { spec+: { deny+: { request+: { suggested_reviewers: if std.isArray(v=suggested_reviewers) then suggested_reviewers else [suggested_reviewers] } } } },
        '#withSuggested_reviewersMixin':: d.fn(help='"SuggestedReviewers is a list of reviewer suggestions.  These can be teleport usernames, but that is not a requirement."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='suggested_reviewers', type=d.T.array)]),
        withSuggested_reviewersMixin(suggested_reviewers): { spec+: { deny+: { request+: { suggested_reviewers+: if std.isArray(v=suggested_reviewers) then suggested_reviewers else [suggested_reviewers] } } } },
        '#withThresholds':: d.fn(help='"Thresholds is a list of thresholds, one of which must be met in order for reviews to trigger a state-transition.  If no thresholds are provided, a default threshold of 1 for approval and denial is used."', args=[d.arg(name='thresholds', type=d.T.array)]),
        withThresholds(thresholds): { spec+: { deny+: { request+: { thresholds: if std.isArray(v=thresholds) then thresholds else [thresholds] } } } },
        '#withThresholdsMixin':: d.fn(help='"Thresholds is a list of thresholds, one of which must be met in order for reviews to trigger a state-transition.  If no thresholds are provided, a default threshold of 1 for approval and denial is used."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='thresholds', type=d.T.array)]),
        withThresholdsMixin(thresholds): { spec+: { deny+: { request+: { thresholds+: if std.isArray(v=thresholds) then thresholds else [thresholds] } } } },
      },
      '#require_session_join':: d.obj(help='"RequireSessionJoin specifies policies for required users to start a session."'),
      require_session_join: {
        '#withCount':: d.fn(help='"Count is the amount of people that need to be matched for this policy to be fulfilled."', args=[d.arg(name='count', type=d.T.integer)]),
        withCount(count): { count: count },
        '#withFilter':: d.fn(help='"Filter is a predicate that determines what users count towards this policy."', args=[d.arg(name='filter', type=d.T.string)]),
        withFilter(filter): { filter: filter },
        '#withKinds':: d.fn(help='"Kinds are the session kinds this policy applies to."', args=[d.arg(name='kinds', type=d.T.array)]),
        withKinds(kinds): { kinds: if std.isArray(v=kinds) then kinds else [kinds] },
        '#withKindsMixin':: d.fn(help='"Kinds are the session kinds this policy applies to."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='kinds', type=d.T.array)]),
        withKindsMixin(kinds): { kinds+: if std.isArray(v=kinds) then kinds else [kinds] },
        '#withModes':: d.fn(help='"Modes is the list of modes that may be used to fulfill this policy."', args=[d.arg(name='modes', type=d.T.array)]),
        withModes(modes): { modes: if std.isArray(v=modes) then modes else [modes] },
        '#withModesMixin':: d.fn(help='"Modes is the list of modes that may be used to fulfill this policy."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='modes', type=d.T.array)]),
        withModesMixin(modes): { modes+: if std.isArray(v=modes) then modes else [modes] },
        '#withName':: d.fn(help='"Name is the name of the policy."', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { name: name },
        '#withOn_leave':: d.fn(help="\"OnLeave is the behaviour that's used when the policy is no longer fulfilled for a live session.\"", args=[d.arg(name='on_leave', type=d.T.string)]),
        withOn_leave(on_leave): { on_leave: on_leave },
      },
      '#review_requests':: d.obj(help='"ReviewRequests defines conditions for submitting access reviews."'),
      review_requests: {
        '#claims_to_roles':: d.obj(help='"ClaimsToRoles specifies a mapping from claims (traits) to teleport roles."'),
        claims_to_roles: {
          '#withClaim':: d.fn(help='"Claim is a claim name."', args=[d.arg(name='claim', type=d.T.string)]),
          withClaim(claim): { claim: claim },
          '#withRoles':: d.fn(help='"Roles is a list of static teleport roles to match."', args=[d.arg(name='roles', type=d.T.array)]),
          withRoles(roles): { roles: if std.isArray(v=roles) then roles else [roles] },
          '#withRolesMixin':: d.fn(help='"Roles is a list of static teleport roles to match."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='roles', type=d.T.array)]),
          withRolesMixin(roles): { roles+: if std.isArray(v=roles) then roles else [roles] },
          '#withValue':: d.fn(help='"Value is a claim value to match."', args=[d.arg(name='value', type=d.T.string)]),
          withValue(value): { value: value },
        },
        '#withClaims_to_roles':: d.fn(help='"ClaimsToRoles specifies a mapping from claims (traits) to teleport roles."', args=[d.arg(name='claims_to_roles', type=d.T.array)]),
        withClaims_to_roles(claims_to_roles): { spec+: { deny+: { review_requests+: { claims_to_roles: if std.isArray(v=claims_to_roles) then claims_to_roles else [claims_to_roles] } } } },
        '#withClaims_to_rolesMixin':: d.fn(help='"ClaimsToRoles specifies a mapping from claims (traits) to teleport roles."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='claims_to_roles', type=d.T.array)]),
        withClaims_to_rolesMixin(claims_to_roles): { spec+: { deny+: { review_requests+: { claims_to_roles+: if std.isArray(v=claims_to_roles) then claims_to_roles else [claims_to_roles] } } } },
        '#withPreview_as_roles':: d.fn(help='"PreviewAsRoles is a list of extra roles which should apply to a reviewer while they are viewing a Resource Access Request for the purposes of viewing details such as the hostname and labels of requested resources."', args=[d.arg(name='preview_as_roles', type=d.T.array)]),
        withPreview_as_roles(preview_as_roles): { spec+: { deny+: { review_requests+: { preview_as_roles: if std.isArray(v=preview_as_roles) then preview_as_roles else [preview_as_roles] } } } },
        '#withPreview_as_rolesMixin':: d.fn(help='"PreviewAsRoles is a list of extra roles which should apply to a reviewer while they are viewing a Resource Access Request for the purposes of viewing details such as the hostname and labels of requested resources."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='preview_as_roles', type=d.T.array)]),
        withPreview_as_rolesMixin(preview_as_roles): { spec+: { deny+: { review_requests+: { preview_as_roles+: if std.isArray(v=preview_as_roles) then preview_as_roles else [preview_as_roles] } } } },
        '#withRoles':: d.fn(help='"Roles is the name of roles which may be reviewed."', args=[d.arg(name='roles', type=d.T.array)]),
        withRoles(roles): { spec+: { deny+: { review_requests+: { roles: if std.isArray(v=roles) then roles else [roles] } } } },
        '#withRolesMixin':: d.fn(help='"Roles is the name of roles which may be reviewed."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='roles', type=d.T.array)]),
        withRolesMixin(roles): { spec+: { deny+: { review_requests+: { roles+: if std.isArray(v=roles) then roles else [roles] } } } },
        '#withWhere':: d.fn(help='"Where is an optional predicate which further limits which requests are reviewable."', args=[d.arg(name='where', type=d.T.string)]),
        withWhere(where): { spec+: { deny+: { review_requests+: { where: where } } } },
      },
      '#rules':: d.obj(help='"Rules is a list of rules and their access levels. Rules are a high level construct used for access control."'),
      rules: {
        '#withActions':: d.fn(help='"Actions specifies optional actions taken when this rule matches"', args=[d.arg(name='actions', type=d.T.array)]),
        withActions(actions): { actions: if std.isArray(v=actions) then actions else [actions] },
        '#withActionsMixin':: d.fn(help='"Actions specifies optional actions taken when this rule matches"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='actions', type=d.T.array)]),
        withActionsMixin(actions): { actions+: if std.isArray(v=actions) then actions else [actions] },
        '#withResources':: d.fn(help='"Resources is a list of resources"', args=[d.arg(name='resources', type=d.T.array)]),
        withResources(resources): { resources: if std.isArray(v=resources) then resources else [resources] },
        '#withResourcesMixin':: d.fn(help='"Resources is a list of resources"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='resources', type=d.T.array)]),
        withResourcesMixin(resources): { resources+: if std.isArray(v=resources) then resources else [resources] },
        '#withVerbs':: d.fn(help='"Verbs is a list of verbs"', args=[d.arg(name='verbs', type=d.T.array)]),
        withVerbs(verbs): { verbs: if std.isArray(v=verbs) then verbs else [verbs] },
        '#withVerbsMixin':: d.fn(help='"Verbs is a list of verbs"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='verbs', type=d.T.array)]),
        withVerbsMixin(verbs): { verbs+: if std.isArray(v=verbs) then verbs else [verbs] },
        '#withWhere':: d.fn(help='"Where specifies optional advanced matcher"', args=[d.arg(name='where', type=d.T.string)]),
        withWhere(where): { where: where },
      },
      '#withApp_labels':: d.fn(help='"AppLabels is a map of labels used as part of the RBAC system."', args=[d.arg(name='app_labels', type=d.T.object)]),
      withApp_labels(app_labels): { spec+: { deny+: { app_labels: app_labels } } },
      '#withApp_labelsMixin':: d.fn(help='"AppLabels is a map of labels used as part of the RBAC system."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='app_labels', type=d.T.object)]),
      withApp_labelsMixin(app_labels): { spec+: { deny+: { app_labels+: app_labels } } },
      '#withAws_role_arns':: d.fn(help='"AWSRoleARNs is a list of AWS role ARNs this role is allowed to assume."', args=[d.arg(name='aws_role_arns', type=d.T.array)]),
      withAws_role_arns(aws_role_arns): { spec+: { deny+: { aws_role_arns: if std.isArray(v=aws_role_arns) then aws_role_arns else [aws_role_arns] } } },
      '#withAws_role_arnsMixin':: d.fn(help='"AWSRoleARNs is a list of AWS role ARNs this role is allowed to assume."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='aws_role_arns', type=d.T.array)]),
      withAws_role_arnsMixin(aws_role_arns): { spec+: { deny+: { aws_role_arns+: if std.isArray(v=aws_role_arns) then aws_role_arns else [aws_role_arns] } } },
      '#withAzure_identities':: d.fn(help='"AzureIdentities is a list of Azure identities this role is allowed to assume."', args=[d.arg(name='azure_identities', type=d.T.array)]),
      withAzure_identities(azure_identities): { spec+: { deny+: { azure_identities: if std.isArray(v=azure_identities) then azure_identities else [azure_identities] } } },
      '#withAzure_identitiesMixin':: d.fn(help='"AzureIdentities is a list of Azure identities this role is allowed to assume."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='azure_identities', type=d.T.array)]),
      withAzure_identitiesMixin(azure_identities): { spec+: { deny+: { azure_identities+: if std.isArray(v=azure_identities) then azure_identities else [azure_identities] } } },
      '#withCluster_labels':: d.fn(help='"ClusterLabels is a map of node labels (used to dynamically grant access to clusters)."', args=[d.arg(name='cluster_labels', type=d.T.object)]),
      withCluster_labels(cluster_labels): { spec+: { deny+: { cluster_labels: cluster_labels } } },
      '#withCluster_labelsMixin':: d.fn(help='"ClusterLabels is a map of node labels (used to dynamically grant access to clusters)."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='cluster_labels', type=d.T.object)]),
      withCluster_labelsMixin(cluster_labels): { spec+: { deny+: { cluster_labels+: cluster_labels } } },
      '#withDb_labels':: d.fn(help='"DatabaseLabels are used in RBAC system to allow/deny access to databases."', args=[d.arg(name='db_labels', type=d.T.object)]),
      withDb_labels(db_labels): { spec+: { deny+: { db_labels: db_labels } } },
      '#withDb_labelsMixin':: d.fn(help='"DatabaseLabels are used in RBAC system to allow/deny access to databases."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='db_labels', type=d.T.object)]),
      withDb_labelsMixin(db_labels): { spec+: { deny+: { db_labels+: db_labels } } },
      '#withDb_names':: d.fn(help='"DatabaseNames is a list of database names this role is allowed to connect to."', args=[d.arg(name='db_names', type=d.T.array)]),
      withDb_names(db_names): { spec+: { deny+: { db_names: if std.isArray(v=db_names) then db_names else [db_names] } } },
      '#withDb_namesMixin':: d.fn(help='"DatabaseNames is a list of database names this role is allowed to connect to."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='db_names', type=d.T.array)]),
      withDb_namesMixin(db_names): { spec+: { deny+: { db_names+: if std.isArray(v=db_names) then db_names else [db_names] } } },
      '#withDb_roles':: d.fn(help='"DatabaseRoles is a list of databases roles for automatic user creation."', args=[d.arg(name='db_roles', type=d.T.array)]),
      withDb_roles(db_roles): { spec+: { deny+: { db_roles: if std.isArray(v=db_roles) then db_roles else [db_roles] } } },
      '#withDb_rolesMixin':: d.fn(help='"DatabaseRoles is a list of databases roles for automatic user creation."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='db_roles', type=d.T.array)]),
      withDb_rolesMixin(db_roles): { spec+: { deny+: { db_roles+: if std.isArray(v=db_roles) then db_roles else [db_roles] } } },
      '#withDb_service_labels':: d.fn(help='"DatabaseServiceLabels are used in RBAC system to allow/deny access to Database Services."', args=[d.arg(name='db_service_labels', type=d.T.object)]),
      withDb_service_labels(db_service_labels): { spec+: { deny+: { db_service_labels: db_service_labels } } },
      '#withDb_service_labelsMixin':: d.fn(help='"DatabaseServiceLabels are used in RBAC system to allow/deny access to Database Services."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='db_service_labels', type=d.T.object)]),
      withDb_service_labelsMixin(db_service_labels): { spec+: { deny+: { db_service_labels+: db_service_labels } } },
      '#withDb_users':: d.fn(help='"DatabaseUsers is a list of databases users this role is allowed to connect as."', args=[d.arg(name='db_users', type=d.T.array)]),
      withDb_users(db_users): { spec+: { deny+: { db_users: if std.isArray(v=db_users) then db_users else [db_users] } } },
      '#withDb_usersMixin':: d.fn(help='"DatabaseUsers is a list of databases users this role is allowed to connect as."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='db_users', type=d.T.array)]),
      withDb_usersMixin(db_users): { spec+: { deny+: { db_users+: if std.isArray(v=db_users) then db_users else [db_users] } } },
      '#withDesktop_groups':: d.fn(help='"DesktopGroups is a list of groups for created desktop users to be added to"', args=[d.arg(name='desktop_groups', type=d.T.array)]),
      withDesktop_groups(desktop_groups): { spec+: { deny+: { desktop_groups: if std.isArray(v=desktop_groups) then desktop_groups else [desktop_groups] } } },
      '#withDesktop_groupsMixin':: d.fn(help='"DesktopGroups is a list of groups for created desktop users to be added to"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='desktop_groups', type=d.T.array)]),
      withDesktop_groupsMixin(desktop_groups): { spec+: { deny+: { desktop_groups+: if std.isArray(v=desktop_groups) then desktop_groups else [desktop_groups] } } },
      '#withGcp_service_accounts':: d.fn(help='"GCPServiceAccounts is a list of GCP service accounts this role is allowed to assume."', args=[d.arg(name='gcp_service_accounts', type=d.T.array)]),
      withGcp_service_accounts(gcp_service_accounts): { spec+: { deny+: { gcp_service_accounts: if std.isArray(v=gcp_service_accounts) then gcp_service_accounts else [gcp_service_accounts] } } },
      '#withGcp_service_accountsMixin':: d.fn(help='"GCPServiceAccounts is a list of GCP service accounts this role is allowed to assume."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='gcp_service_accounts', type=d.T.array)]),
      withGcp_service_accountsMixin(gcp_service_accounts): { spec+: { deny+: { gcp_service_accounts+: if std.isArray(v=gcp_service_accounts) then gcp_service_accounts else [gcp_service_accounts] } } },
      '#withGroup_labels':: d.fn(help='"GroupLabels is a map of labels used as part of the RBAC system."', args=[d.arg(name='group_labels', type=d.T.object)]),
      withGroup_labels(group_labels): { spec+: { deny+: { group_labels: group_labels } } },
      '#withGroup_labelsMixin':: d.fn(help='"GroupLabels is a map of labels used as part of the RBAC system."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='group_labels', type=d.T.object)]),
      withGroup_labelsMixin(group_labels): { spec+: { deny+: { group_labels+: group_labels } } },
      '#withHost_groups':: d.fn(help='"HostGroups is a list of groups for created users to be added to"', args=[d.arg(name='host_groups', type=d.T.array)]),
      withHost_groups(host_groups): { spec+: { deny+: { host_groups: if std.isArray(v=host_groups) then host_groups else [host_groups] } } },
      '#withHost_groupsMixin':: d.fn(help='"HostGroups is a list of groups for created users to be added to"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='host_groups', type=d.T.array)]),
      withHost_groupsMixin(host_groups): { spec+: { deny+: { host_groups+: if std.isArray(v=host_groups) then host_groups else [host_groups] } } },
      '#withHost_sudoers':: d.fn(help='"HostSudoers is a list of entries to include in a users sudoer file"', args=[d.arg(name='host_sudoers', type=d.T.array)]),
      withHost_sudoers(host_sudoers): { spec+: { deny+: { host_sudoers: if std.isArray(v=host_sudoers) then host_sudoers else [host_sudoers] } } },
      '#withHost_sudoersMixin':: d.fn(help='"HostSudoers is a list of entries to include in a users sudoer file"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='host_sudoers', type=d.T.array)]),
      withHost_sudoersMixin(host_sudoers): { spec+: { deny+: { host_sudoers+: if std.isArray(v=host_sudoers) then host_sudoers else [host_sudoers] } } },
      '#withJoin_sessions':: d.fn(help='"JoinSessions specifies policies to allow users to join other sessions."', args=[d.arg(name='join_sessions', type=d.T.array)]),
      withJoin_sessions(join_sessions): { spec+: { deny+: { join_sessions: if std.isArray(v=join_sessions) then join_sessions else [join_sessions] } } },
      '#withJoin_sessionsMixin':: d.fn(help='"JoinSessions specifies policies to allow users to join other sessions."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='join_sessions', type=d.T.array)]),
      withJoin_sessionsMixin(join_sessions): { spec+: { deny+: { join_sessions+: if std.isArray(v=join_sessions) then join_sessions else [join_sessions] } } },
      '#withKubernetes_groups':: d.fn(help='"KubeGroups is a list of kubernetes groups"', args=[d.arg(name='kubernetes_groups', type=d.T.array)]),
      withKubernetes_groups(kubernetes_groups): { spec+: { deny+: { kubernetes_groups: if std.isArray(v=kubernetes_groups) then kubernetes_groups else [kubernetes_groups] } } },
      '#withKubernetes_groupsMixin':: d.fn(help='"KubeGroups is a list of kubernetes groups"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='kubernetes_groups', type=d.T.array)]),
      withKubernetes_groupsMixin(kubernetes_groups): { spec+: { deny+: { kubernetes_groups+: if std.isArray(v=kubernetes_groups) then kubernetes_groups else [kubernetes_groups] } } },
      '#withKubernetes_labels':: d.fn(help='"KubernetesLabels is a map of kubernetes cluster labels used for RBAC."', args=[d.arg(name='kubernetes_labels', type=d.T.object)]),
      withKubernetes_labels(kubernetes_labels): { spec+: { deny+: { kubernetes_labels: kubernetes_labels } } },
      '#withKubernetes_labelsMixin':: d.fn(help='"KubernetesLabels is a map of kubernetes cluster labels used for RBAC."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='kubernetes_labels', type=d.T.object)]),
      withKubernetes_labelsMixin(kubernetes_labels): { spec+: { deny+: { kubernetes_labels+: kubernetes_labels } } },
      '#withKubernetes_resources':: d.fn(help='"KubernetesResources is the Kubernetes Resources this Role grants access to."', args=[d.arg(name='kubernetes_resources', type=d.T.array)]),
      withKubernetes_resources(kubernetes_resources): { spec+: { deny+: { kubernetes_resources: if std.isArray(v=kubernetes_resources) then kubernetes_resources else [kubernetes_resources] } } },
      '#withKubernetes_resourcesMixin':: d.fn(help='"KubernetesResources is the Kubernetes Resources this Role grants access to."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='kubernetes_resources', type=d.T.array)]),
      withKubernetes_resourcesMixin(kubernetes_resources): { spec+: { deny+: { kubernetes_resources+: if std.isArray(v=kubernetes_resources) then kubernetes_resources else [kubernetes_resources] } } },
      '#withKubernetes_users':: d.fn(help='"KubeUsers is an optional kubernetes users to impersonate"', args=[d.arg(name='kubernetes_users', type=d.T.array)]),
      withKubernetes_users(kubernetes_users): { spec+: { deny+: { kubernetes_users: if std.isArray(v=kubernetes_users) then kubernetes_users else [kubernetes_users] } } },
      '#withKubernetes_usersMixin':: d.fn(help='"KubeUsers is an optional kubernetes users to impersonate"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='kubernetes_users', type=d.T.array)]),
      withKubernetes_usersMixin(kubernetes_users): { spec+: { deny+: { kubernetes_users+: if std.isArray(v=kubernetes_users) then kubernetes_users else [kubernetes_users] } } },
      '#withLogins':: d.fn(help='"Logins is a list of *nix system logins."', args=[d.arg(name='logins', type=d.T.array)]),
      withLogins(logins): { spec+: { deny+: { logins: if std.isArray(v=logins) then logins else [logins] } } },
      '#withLoginsMixin':: d.fn(help='"Logins is a list of *nix system logins."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='logins', type=d.T.array)]),
      withLoginsMixin(logins): { spec+: { deny+: { logins+: if std.isArray(v=logins) then logins else [logins] } } },
      '#withNode_labels':: d.fn(help='"NodeLabels is a map of node labels (used to dynamically grant access to nodes)."', args=[d.arg(name='node_labels', type=d.T.object)]),
      withNode_labels(node_labels): { spec+: { deny+: { node_labels: node_labels } } },
      '#withNode_labelsMixin':: d.fn(help='"NodeLabels is a map of node labels (used to dynamically grant access to nodes)."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='node_labels', type=d.T.object)]),
      withNode_labelsMixin(node_labels): { spec+: { deny+: { node_labels+: node_labels } } },
      '#withRequire_session_join':: d.fn(help='"RequireSessionJoin specifies policies for required users to start a session."', args=[d.arg(name='require_session_join', type=d.T.array)]),
      withRequire_session_join(require_session_join): { spec+: { deny+: { require_session_join: if std.isArray(v=require_session_join) then require_session_join else [require_session_join] } } },
      '#withRequire_session_joinMixin':: d.fn(help='"RequireSessionJoin specifies policies for required users to start a session."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='require_session_join', type=d.T.array)]),
      withRequire_session_joinMixin(require_session_join): { spec+: { deny+: { require_session_join+: if std.isArray(v=require_session_join) then require_session_join else [require_session_join] } } },
      '#withRules':: d.fn(help='"Rules is a list of rules and their access levels. Rules are a high level construct used for access control."', args=[d.arg(name='rules', type=d.T.array)]),
      withRules(rules): { spec+: { deny+: { rules: if std.isArray(v=rules) then rules else [rules] } } },
      '#withRulesMixin':: d.fn(help='"Rules is a list of rules and their access levels. Rules are a high level construct used for access control."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='rules', type=d.T.array)]),
      withRulesMixin(rules): { spec+: { deny+: { rules+: if std.isArray(v=rules) then rules else [rules] } } },
      '#withWindows_desktop_labels':: d.fn(help='"WindowsDesktopLabels are used in the RBAC system to allow/deny access to Windows desktops."', args=[d.arg(name='windows_desktop_labels', type=d.T.object)]),
      withWindows_desktop_labels(windows_desktop_labels): { spec+: { deny+: { windows_desktop_labels: windows_desktop_labels } } },
      '#withWindows_desktop_labelsMixin':: d.fn(help='"WindowsDesktopLabels are used in the RBAC system to allow/deny access to Windows desktops."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='windows_desktop_labels', type=d.T.object)]),
      withWindows_desktop_labelsMixin(windows_desktop_labels): { spec+: { deny+: { windows_desktop_labels+: windows_desktop_labels } } },
      '#withWindows_desktop_logins':: d.fn(help='"WindowsDesktopLogins is a list of desktop login names allowed/denied for Windows desktops."', args=[d.arg(name='windows_desktop_logins', type=d.T.array)]),
      withWindows_desktop_logins(windows_desktop_logins): { spec+: { deny+: { windows_desktop_logins: if std.isArray(v=windows_desktop_logins) then windows_desktop_logins else [windows_desktop_logins] } } },
      '#withWindows_desktop_loginsMixin':: d.fn(help='"WindowsDesktopLogins is a list of desktop login names allowed/denied for Windows desktops."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='windows_desktop_logins', type=d.T.array)]),
      withWindows_desktop_loginsMixin(windows_desktop_logins): { spec+: { deny+: { windows_desktop_logins+: if std.isArray(v=windows_desktop_logins) then windows_desktop_logins else [windows_desktop_logins] } } },
    },
    '#options':: d.obj(help='"Options is for OpenSSH options like agent forwarding."'),
    options: {
      '#cert_extensions':: d.obj(help='"CertExtensions specifies the key/values"'),
      cert_extensions: {
        '#withMode':: d.fn(help='"Mode is the type of extension to be used -- currently critical-option is not supported"', args=[d.arg(name='mode', type=d.T.integer)]),
        withMode(mode): { mode: mode },
        '#withName':: d.fn(help='"Name specifies the key to be used in the cert extension."', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { name: name },
        '#withType':: d.fn(help='"Type represents the certificate type being extended, only ssh is supported at this time."', args=[d.arg(name='type', type=d.T.integer)]),
        withType(type): { type: type },
        '#withValue':: d.fn(help='"Value specifies the value to be used in the cert extension."', args=[d.arg(name='value', type=d.T.string)]),
        withValue(value): { value: value },
      },
      '#idp':: d.obj(help='"IDP is a set of options related to accessing IdPs within Teleport. Requires Teleport Enterprise."'),
      idp: {
        '#saml':: d.obj(help='"SAML are options related to the Teleport SAML IdP."'),
        saml: {
          '#withEnabled':: d.fn(help='"Enabled is set to true if this option allows access to the Teleport SAML IdP."', args=[d.arg(name='enabled', type=d.T.boolean)]),
          withEnabled(enabled): { spec+: { options+: { idp+: { saml+: { enabled: enabled } } } } },
        },
      },
      '#record_session':: d.obj(help='"RecordDesktopSession indicates whether desktop access sessions should be recorded. It defaults to true unless explicitly set to false."'),
      record_session: {
        '#withDefault':: d.fn(help='"Default indicates the default value for the services."', args=[d.arg(name='default', type=d.T.string)]),
        withDefault(default): { spec+: { options+: { record_session+: { default: default } } } },
        '#withDesktop':: d.fn(help='"Desktop indicates whether desktop sessions should be recorded. It defaults to true unless explicitly set to false."', args=[d.arg(name='desktop', type=d.T.boolean)]),
        withDesktop(desktop): { spec+: { options+: { record_session+: { desktop: desktop } } } },
        '#withSsh':: d.fn(help='"SSH indicates the session mode used on SSH sessions."', args=[d.arg(name='ssh', type=d.T.string)]),
        withSsh(ssh): { spec+: { options+: { record_session+: { ssh: ssh } } } },
      },
      '#withCert_extensions':: d.fn(help='"CertExtensions specifies the key/values"', args=[d.arg(name='cert_extensions', type=d.T.array)]),
      withCert_extensions(cert_extensions): { spec+: { options+: { cert_extensions: if std.isArray(v=cert_extensions) then cert_extensions else [cert_extensions] } } },
      '#withCert_extensionsMixin':: d.fn(help='"CertExtensions specifies the key/values"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='cert_extensions', type=d.T.array)]),
      withCert_extensionsMixin(cert_extensions): { spec+: { options+: { cert_extensions+: if std.isArray(v=cert_extensions) then cert_extensions else [cert_extensions] } } },
      '#withCert_format':: d.fn(help='"CertificateFormat defines the format of the user certificate to allow compatibility with older versions of OpenSSH."', args=[d.arg(name='cert_format', type=d.T.string)]),
      withCert_format(cert_format): { spec+: { options+: { cert_format: cert_format } } },
      '#withClient_idle_timeout':: d.fn(help='"ClientIdleTimeout sets disconnect clients on idle timeout behavior, if set to 0 means do not disconnect, otherwise is set to the idle duration."', args=[d.arg(name='client_idle_timeout', type=d.T.string)]),
      withClient_idle_timeout(client_idle_timeout): { spec+: { options+: { client_idle_timeout: client_idle_timeout } } },
      '#withCreate_db_user':: d.fn(help='"CreateDatabaseUser enabled automatic database user creation."', args=[d.arg(name='create_db_user', type=d.T.boolean)]),
      withCreate_db_user(create_db_user): { spec+: { options+: { create_db_user: create_db_user } } },
      '#withCreate_desktop_user':: d.fn(help='"CreateDesktopUser allows users to be automatically created on a Windows desktop"', args=[d.arg(name='create_desktop_user', type=d.T.boolean)]),
      withCreate_desktop_user(create_desktop_user): { spec+: { options+: { create_desktop_user: create_desktop_user } } },
      '#withCreate_host_user':: d.fn(help='"CreateHostUser allows users to be automatically created on a host"', args=[d.arg(name='create_host_user', type=d.T.boolean)]),
      withCreate_host_user(create_host_user): { spec+: { options+: { create_host_user: create_host_user } } },
      '#withDesktop_clipboard':: d.fn(help="\"DesktopClipboard indicates whether clipboard sharing is allowed between the user's workstation and the remote desktop. It defaults to true unless explicitly set to false.\"", args=[d.arg(name='desktop_clipboard', type=d.T.boolean)]),
      withDesktop_clipboard(desktop_clipboard): { spec+: { options+: { desktop_clipboard: desktop_clipboard } } },
      '#withDesktop_directory_sharing':: d.fn(help="\"DesktopDirectorySharing indicates whether directory sharing is allowed between the user's workstation and the remote desktop. It defaults to false unless explicitly set to true.\"", args=[d.arg(name='desktop_directory_sharing', type=d.T.boolean)]),
      withDesktop_directory_sharing(desktop_directory_sharing): { spec+: { options+: { desktop_directory_sharing: desktop_directory_sharing } } },
      '#withDevice_trust_mode':: d.fn(help='"DeviceTrustMode is the device authorization mode used for the resources associated with the role. See DeviceTrust.Mode. Reserved for future use, not yet used by Teleport."', args=[d.arg(name='device_trust_mode', type=d.T.string)]),
      withDevice_trust_mode(device_trust_mode): { spec+: { options+: { device_trust_mode: device_trust_mode } } },
      '#withDisconnect_expired_cert':: d.fn(help='"DisconnectExpiredCert sets disconnect clients on expired certificates."', args=[d.arg(name='disconnect_expired_cert', type=d.T.boolean)]),
      withDisconnect_expired_cert(disconnect_expired_cert): { spec+: { options+: { disconnect_expired_cert: disconnect_expired_cert } } },
      '#withEnhanced_recording':: d.fn(help='"BPF defines what events to record for the BPF-based session recorder."', args=[d.arg(name='enhanced_recording', type=d.T.array)]),
      withEnhanced_recording(enhanced_recording): { spec+: { options+: { enhanced_recording: if std.isArray(v=enhanced_recording) then enhanced_recording else [enhanced_recording] } } },
      '#withEnhanced_recordingMixin':: d.fn(help='"BPF defines what events to record for the BPF-based session recorder."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='enhanced_recording', type=d.T.array)]),
      withEnhanced_recordingMixin(enhanced_recording): { spec+: { options+: { enhanced_recording+: if std.isArray(v=enhanced_recording) then enhanced_recording else [enhanced_recording] } } },
      '#withForward_agent':: d.fn(help='"ForwardAgent is SSH agent forwarding."', args=[d.arg(name='forward_agent', type=d.T.boolean)]),
      withForward_agent(forward_agent): { spec+: { options+: { forward_agent: forward_agent } } },
      '#withLock':: d.fn(help='"Lock specifies the locking mode (strict|best_effort) to be applied with the role."', args=[d.arg(name='lock', type=d.T.string)]),
      withLock(lock): { spec+: { options+: { lock: lock } } },
      '#withMax_connections':: d.fn(help='"MaxConnections defines the maximum number of concurrent connections a user may hold."', args=[d.arg(name='max_connections', type=d.T.integer)]),
      withMax_connections(max_connections): { spec+: { options+: { max_connections: max_connections } } },
      '#withMax_kubernetes_connections':: d.fn(help='"MaxKubernetesConnections defines the maximum number of concurrent Kubernetes sessions a user may hold."', args=[d.arg(name='max_kubernetes_connections', type=d.T.integer)]),
      withMax_kubernetes_connections(max_kubernetes_connections): { spec+: { options+: { max_kubernetes_connections: max_kubernetes_connections } } },
      '#withMax_session_ttl':: d.fn(help='"MaxSessionTTL defines how long a SSH session can last for."', args=[d.arg(name='max_session_ttl', type=d.T.string)]),
      withMax_session_ttl(max_session_ttl): { spec+: { options+: { max_session_ttl: max_session_ttl } } },
      '#withMax_sessions':: d.fn(help='"MaxSessions defines the maximum number of concurrent sessions per connection."', args=[d.arg(name='max_sessions', type=d.T.integer)]),
      withMax_sessions(max_sessions): { spec+: { options+: { max_sessions: max_sessions } } },
      '#withPermit_x11_forwarding':: d.fn(help='"PermitX11Forwarding authorizes use of X11 forwarding."', args=[d.arg(name='permit_x11_forwarding', type=d.T.boolean)]),
      withPermit_x11_forwarding(permit_x11_forwarding): { spec+: { options+: { permit_x11_forwarding: permit_x11_forwarding } } },
      '#withPin_source_ip':: d.fn(help='"PinSourceIP forces the same client IP for certificate generation and usage"', args=[d.arg(name='pin_source_ip', type=d.T.boolean)]),
      withPin_source_ip(pin_source_ip): { spec+: { options+: { pin_source_ip: pin_source_ip } } },
      '#withPort_forwarding':: d.fn(help="\"PortForwarding defines if the certificate will have \\\"permit-port-forwarding\\\" in the certificate. PortForwarding is \\\"yes\\\" if not set, that's why this is a pointer\"", args=[d.arg(name='port_forwarding', type=d.T.boolean)]),
      withPort_forwarding(port_forwarding): { spec+: { options+: { port_forwarding: port_forwarding } } },
      '#withRequest_access':: d.fn(help='"RequestAccess defines the access request strategy (optional|note|always) where optional is the default."', args=[d.arg(name='request_access', type=d.T.string)]),
      withRequest_access(request_access): { spec+: { options+: { request_access: request_access } } },
      '#withRequest_prompt':: d.fn(help='"RequestPrompt is an optional message which tells users what they aught to"', args=[d.arg(name='request_prompt', type=d.T.string)]),
      withRequest_prompt(request_prompt): { spec+: { options+: { request_prompt: request_prompt } } },
      '#withRequire_session_mfa':: d.fn(help='"RequireMFAType is the type of MFA requirement enforced for this user."', args=[d.arg(name='require_session_mfa', type=d.T.integer)]),
      withRequire_session_mfa(require_session_mfa): { spec+: { options+: { require_session_mfa: require_session_mfa } } },
      '#withSsh_file_copy':: d.fn(help='"SSHFileCopy indicates whether remote file operations via SCP or SFTP are allowed over an SSH session. It defaults to true unless explicitly set to false."', args=[d.arg(name='ssh_file_copy', type=d.T.boolean)]),
      withSsh_file_copy(ssh_file_copy): { spec+: { options+: { ssh_file_copy: ssh_file_copy } } },
    },
  },
  '#mixin': 'ignore',
  mixin: self,
}
